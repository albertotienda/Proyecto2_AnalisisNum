#include <stdio.h>					// JOSÃ‰ ALBERTO TIENDA ALEJANDRO 1913852
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <math.h>
#include "pai.h"

int main(){	
	char entrada[' ']; 
	int pasos, n, i, k, valido, opcion;
	float coeficiente[' '], exponente[' '], x1, xu, xr[' '], fx1, fxu, fxr, error, error0;
	do
	{
		system("cls");
		pasos = 0;
		
		//Pantalla inicial y lectura de numero de variables
		do{
			system("cls");
			printf("\n\n\n\t SOLUCIONADOR PARA RAICES DE ECUACIONES - METODO DE BISECCION O BOLZANO");
			printf("\n\n\t Ingrese el numero de terminos en la ecuacion a resolver: ");
			fflush(stdin);
			gets(entrada);
			valido = EsEnteroValido(entrada, &n, "ERROR: Intenta nuevamente.");
			if(valido && n <= 0){
				valido = 0;
				printf("\n\n\t ERROR: Numero no valido. Intenta nuevamente.");
				printf("\n\n\n\n\n\t ");
				system("pause");
			}
		} while (!valido);

		do{
			system("cls");
			printf("\n\n\n\t SOLUCIONADOR DE RAICES DE ECUACIONES - METODO DE BIZECCION (BOLZANO)");
			printf("\n\n\t Ingrese el error aproximado deseado (Error < ?): ");
			fflush(stdin);
			gets(entrada);
			valido = EsFlotanteValido(entrada, &error, "ERROR: Intenta nuevamente.");
			if(valido && error <= 0){
				valido = 0;
				printf("\n\n\t ERROR: Numero no valido. Intenta nuevamente.");
				printf("\n\n\n\n\n\t ");
				system("pause");
			}
		} while (!valido);
		
		//Lectura de la ecuacion
		for(i = 0; i < n; i++){
				
			do {
				system("cls");
				printf("\n\n\t LECTURA DE LA ECUACION ");
				printf("\n\n\t Ingresa los valores requeridos.");
				printf("\n\n\t Termino %d", i+1);		
				printf("\n\t Coeficiente: ");
				fflush(stdin);
				gets(entrada);
				valido = EsFlotanteValido(entrada, &coeficiente[i], "ERROR: Intente nuevamente");
			} while (!valido);
			do {
				system("cls");
				printf("\n\n\t LECTURA DE LA ECUACION ");
				printf("\n\n\t Ingresa los valores requeridos.");
				printf("\n\n\t Termino %d", i+1);		
				printf("\n\t Exponente de la variable (x^?): ");
				fflush(stdin);
				gets(entrada);
				valido = EsFlotanteValido(entrada, &exponente[i], "ERROR: Intente nuevamente");
			} while (!valido);
		}
		
		//Lectura de los valores iniciales
		do{
			do{
				system("cls");
				printf("\n\n\tIngrese los valores iniciales de X1 y Xu de tal forma que \n\t");
				printf("la funcion cambie de signo sobre el intervalo (f(X1)*f(Xu) < 0");
				printf("\n\n\t X1 = ");
				fflush(stdin);
				gets(entrada);
				valido = EsFlotanteValido(entrada, &x1, "ERROR: Intenta nuevamente.");
			} while (!valido);
			do{
				system("cls");
				printf("\n\n\tIngrese los valores iniciales de X1 y Xu de tal forma que \n\t");
				printf("la funcion cambie de signo sobre el intervalo (f(X1)*f(Xu) < 0");
				printf("\n\n\t Xu = ");
				fflush(stdin);
				gets(entrada);
				valido = EsFlotanteValido(entrada, &xu, "ERROR: Intenta nuevamente.");
			} while (!valido);
			
			fx1 = 0;
			fxu = 0;
			for(i = 0; i < n; i++){
				fx1 += pow(x1, exponente[i])*coeficiente[i];
				fxu += pow(xu, exponente[i])*coeficiente[i];
			}
			
			if(fx1*fxu >= 0){
				printf("\n\n\t ERROR: Intervalo no valido, intente nuevamente.\n\n\t ");
				system("pause");
			}
		} while(fx1*fxu >= 0);
		
		do{
			system("cls");
			printf("\n\n\t Mostrar todas las iteraciones [SI=1, NO=0]: ");
			fflush(stdin);
			gets(entrada);
			valido = EsEnteroValido(entrada, &pasos, "ERROR: Intenta nuevamente.");
			if(valido && pasos != 1 && pasos != 0){
				valido = 0;
				printf("\n\n\t ERROR: Numero no valido. Intenta nuevamente.");
				printf("\n\n\n\n\n\t ");
				system("pause");
			}
		} while (!valido);
		
		//Solucionar sistema
		if(pasos)
			system("cls");
			
		k = 0;
		error0 = 100;
		do{
			
			xr[k] = (x1 + xu)/2;
			if(pasos){
				printf("\n\n\t Aproximacion %d", k+1);
				printf("\n\t x1 = %.3f \t f(x1) = %.3f", x1, fx1);
				printf("\n\t xu = %.3f \t f(xu) = %.3f", xu, fxu);
				printf("\n\t xr = %.3f", xr[k]);
			}
			if(k > 0)
				error0 = ((xr[k] - xr[k-1])/xr[k])*100;
			if(error0 < 0)
				error0 *= -1;
			if(pasos)
				printf("\n\t Error aproximado = %.3f", error0);
			
			fx1 = 0;
			fxr = 0;
			for(i = 0; i < n; i++){
				fx1 += pow(x1, exponente[i])*coeficiente[i];
				fxr += pow(xr[k], exponente[i])*coeficiente[i];
			}
			if(fx1*fxr < 0)
				xu = xr[k];
			else
				if(fx1*fxr > 0)
					x1 = xr[k];				
			
			if(fx1*fxr == 0)
				error0 = 0;
			
			if(error0 >= error)
				k++;
				
		} while (error0 >= error);
		
		if(pasos){
			printf("\n\n\t");
			system("pause");
		}
		

		//Pantalla final 
		do{
			system("cls");
			printf("\n\n\t SOLUCION");
			printf("\n\n\t f(x) = ");
			for(i = 0; i < n; i++){
				if(coeficiente[i] > 0){
					printf("+");
				}		
				printf("%.3fx^%.1f\t", coeficiente[i], exponente[i]);
			}		
			printf("\n\n\t Xr = %.4f", xr[k]);
	
			printf("\n\n\t Calcular la raiz para otra ecuacion [SI=1, NO=0]: ");
			fflush(stdin);
			gets(entrada);
			valido = EsEnteroValido(entrada, &opcion, "ERROR: Intenta nuevamente.");
			if(valido && opcion != 1 && opcion != 0){
				valido = 0;
				printf("\n\t ERROR: Intenta nuevamente.");
				printf("\n\n\n\n\n\t ");
				system("pause");
			}
		} while (!valido);
	
	} while (opcion==1);

	return 0;
}										
																	
int EsEnteroValido(char entrada[], int* salida, char mensajeDeError[])
{
	int i, valido = 1;

	if (entrada[0] == '\0')
		valido = 0;
	else
		for (i = 0; i < strlen(entrada); i++)
		{
			if (!isdigit(entrada[i]) && entrada[i]!= '-')
				valido = 0;
		}

	if (valido == 0)
	{
		printf("\n\n\t %s", mensajeDeError);
		printf("\n\n\n\n\n\t ");
		system("pause");
	}
	else
		*salida = atoi(entrada);
	return valido;
}

int EsFlotanteValido(char entrada[], float* salida, char mensajeDeError[])
{
	int i, valido = 1, punto = 0;
	
	if(entrada[0] == '\0')
		valido = 0;
		
	if (!isdigit(entrada[0]) && entrada[0] != '.' && entrada[0] != '-')
		valido = 0;
				
	for (i = 1; i < strlen(entrada); i++){
		
		if (!isdigit(entrada[i]) && entrada[i] != '.')
			valido = 0;
		
		if(entrada[i] == '.' && punto == 0)
			punto = 1;
		else
			if(entrada[i] == '.' && punto == 1)
				valido = 0;
	}
	
	if(strlen(entrada) == 1){
		if(entrada[0] == '.' || entrada[0] == '-')
			valido = 0;
	}
	
	if (valido == 0)
	{
		printf("\n\n\t %s", mensajeDeError);
		printf("\n\n\n\n\n\t ");
		system("pause");
	}
	else
		*salida = atof(entrada);
	
	return valido;
}
